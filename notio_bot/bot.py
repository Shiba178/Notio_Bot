import os
import json
import logging
from datetime import datetime
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, ContextTypes, filters
from openai import OpenAI
from db import init_db, add_event, get_upcoming_events, add_note, get_notes_by_tag, get_note_by_name
from scheduler import start_scheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")
OPENAI_KEY = os.environ.get("OPENAI_API_KEY")

if not TELEGRAM_TOKEN or not OPENAI_KEY:
    logger.error("–ù–µ –∑–∞–¥–∞–Ω—ã TELEGRAM_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    raise ValueError("–¢—Ä–µ–±—É—é—Ç—Å—è TELEGRAM_TOKEN –∏ OPENAI_API_KEY")

client = OpenAI(api_key=OPENAI_KEY)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
try:
    init_db()
    start_scheduler()
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î –∏–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
    raise

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not update.message or not update.message.text:
        return

    user_id = update.effective_user.id
    user_message = update.message.text.strip()
    logger.info(f"[USER {user_id}] {user_message}")

    try:
        # –ó–∞–ø—Ä–æ—Å –∫ OpenAI
        gpt_response = client.chat.completions.create(
            model="gpt-3.5-turbo",
            messages=[
                {
                    "role": "system",
                    "content": (
                        "–¢—ã –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è Telegram-–±–æ—Ç–∞ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –∏ –∑–∞–º–µ—Ç–æ–∫. "
                        "–ù–∞ –æ—Å–Ω–æ–≤–µ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–ø—Ä–µ–¥–µ–ª–∏ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π: "
                        "1) —Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ, 2) –ø–æ–∫–∞–∑–∞—Ç—å_—Å–æ–±—ã—Ç–∏—è, 3) —Å–æ–∑–¥–∞—Ç—å_–∑–∞–º–µ—Ç–∫—É, "
                        "4) –ø–æ–∫–∞–∑–∞—Ç—å_–∑–∞–º–µ—Ç–∫–∏_–ø–æ_—Ç–µ–≥—É, 5) –æ—Ç–∫—Ä—ã—Ç—å_–∑–∞–º–µ—Ç–∫—É, 6) –¥—Ä—É–≥–æ–µ. "
                        "–û—Ç–≤–µ—Ç—å —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON —Å –∫–ª—é—á–∞–º–∏: action –∏ details."
                    )
                },
                {"role": "user", "content": user_message}
            ],
            temperature=0.3  # –î–ª—è –±–æ–ª–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        )

        response_content = gpt_response.choices[0].message.content
        parsed = json.loads(response_content)
        action = parsed.get("action")
        details = parsed.get("details", {})

        logger.info(f"Parsed response: action={action}, details={details}")

    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç OpenAI: {e}")
        await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ OpenAI: {e}")
        await update.message.reply_text("‚ùó –û—à–∏–±–∫–∞ —Å–≤—è–∑–∏ —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    try:
        if action == "—Å–æ–∑–¥–∞—Ç—å_—Å–æ–±—ã—Ç–∏–µ":
            required_fields = ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "–¥–∞—Ç–∞"]
            if not all(field in details for field in required_fields):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

            event_name = details["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
            date_str = details["–¥–∞—Ç–∞"]
            remind_before = int(details.get("–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ_–∑–∞", 24))
            
            try:
                event_date = datetime.strptime(date_str, "%d.%m.%y %H:%M")
            except ValueError:
                event_date = datetime.strptime(date_str, "%d.%m.%Y %H:%M")
            
            add_event(user_id, event_name, event_date, remind_before)
            await update.message.reply_text(
                f"‚úÖ –°–æ–±—ã—Ç–∏–µ '{event_name}' —Å–æ–∑–¥–∞–Ω–æ –Ω–∞ {event_date.strftime('%d.%m.%Y %H:%M')} "
                f"—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ–º –∑–∞ {remind_before} —á."
            )

        elif action == "–ø–æ–∫–∞–∑–∞—Ç—å_—Å–æ–±—ã—Ç–∏—è":
            days = int(details.get("–¥–Ω–µ–π", 7))
            events = get_upcoming_events(user_id, days)
            
            if events:
                msg = "üìÖ –í–∞—à–∏ –ø–ª–∞–Ω—ã:\n" + "\n".join(
                    [f"‚Äî {e['event_name']} ‚Äî {e['event_date'].strftime('%d.%m.%Y %H:%M')}" 
                     for e in events]
                )
            else:
                msg = "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
            await update.message.reply_text(msg)

        elif action == "—Å–æ–∑–¥–∞—Ç—å_–∑–∞–º–µ—Ç–∫—É":
            required_fields = ["–Ω–∞–∑–≤–∞–Ω–∏–µ", "—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"]
            if not all(field in details for field in required_fields):
                raise ValueError("–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è")

            name = details["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
            content = details["—Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ"]
            tags = details.get("—Ç–µ–≥–∏", [])
            
            if isinstance(tags, str):
                tags = [tag.strip() for tag in tags.split(",")]
            
            add_note(user_id, name, content, tags)
            await update.message.reply_text(f"üìù –ó–∞–º–µ—Ç–∫–∞ '{name}' —Å–æ–∑–¥–∞–Ω–∞.")

        elif action == "–ø–æ–∫–∞–∑–∞—Ç—å_–∑–∞–º–µ—Ç–∫–∏_–ø–æ_—Ç–µ–≥—É":
            if "—Ç–µ–≥" not in details:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω —Ç–µ–≥")
                
            tag = details["—Ç–µ–≥"]
            notes = get_notes_by_tag(user_id, tag)
            
            if notes:
                msg = "üìö –ó–∞–º–µ—Ç–∫–∏:\n" + "\n".join([f"- {n['note_name']}" for n in notes])
            else:
                msg = "üì≠ –ó–∞–º–µ—Ç–æ–∫ —Å —Ç–∞–∫–∏–º —Ç–µ–≥–æ–º –Ω–µ—Ç."
            await update.message.reply_text(msg)

        elif action == "–æ—Ç–∫—Ä—ã—Ç—å_–∑–∞–º–µ—Ç–∫—É":
            if "–Ω–∞–∑–≤–∞–Ω–∏–µ" not in details:
                raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏")
                
            name = details["–Ω–∞–∑–≤–∞–Ω–∏–µ"]
            note = get_note_by_name(user_id, name)
            
            if note:
                await update.message.reply_text(f"üìñ {note['note_name']}:\n{note['note_content']}")
            else:
                await update.message.reply_text("üì≠ –ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

        else:
            await update.message.reply_text("ü§ñ –ù–µ —É–≤–µ—Ä–µ–Ω, –∫–∞–∫ –ø–æ–º–æ—á—å —Å —ç—Ç–∏–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å.")

    except KeyError as e:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ: {e}")
        await update.message.reply_text("‚ùó –í –∑–∞–ø—Ä–æ—Å–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.")
    except ValueError as e:
        logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
        await update.message.reply_text(f"‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {e}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞: {e}")
        await update.message.reply_text("‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

async def post_init(application):
    await application.bot.set_my_commands([
        ("start", "–ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã"),
        ("help", "–ü–æ–º–æ—â—å")
    ])

app.post_init(post_init)

if __name__ == "__main__":
    app.run_polling()
