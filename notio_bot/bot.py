import os
import re
import logging
from datetime import datetime, timedelta
from telegram import Update
from telegram.ext import ApplicationBuilder, MessageHandler, ContextTypes, filters
from db import init_db, add_event, get_upcoming_events, delete_event, add_note, get_notes_by_tag, get_note_by_name, delete_note, rename_note
from scheduler import start_scheduler

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
init_db()
start_scheduler()

app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# =============================== –ü–ê–†–°–ï–† ===============================
def parse_date_time(date_str, time_str):
    try:
        now = datetime.now()
        dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m %H:%M")
        dt = dt.replace(year=now.year)
        return dt
    except ValueError:
        return None

# =============================== –û–ë–†–ê–ë–û–¢–ß–ò–ö ===============================
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    text_lower = text.lower()

    # ========== 1. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò –í –ö–ê–õ–ï–ù–î–ê–†–¨ ==========
    match = re.match(r"–∑–∞–ø–æ–º–Ω–∏ (\d{2}\.\d{2}) –≤ (\d{2}:\d{2}) (.+?)(?: –Ω–∞–ø–æ–º–Ω–∏ –≤ (\d{2}:\d{2}))?$", text_lower)
    if match:
        date_str = match.group(1)
        time_str = match.group(2)
        event_name = match.group(3).strip()
        remind_time_str = match.group(4)

        event_datetime = parse_date_time(date_str, time_str)
        if not event_datetime:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        if remind_time_str:
            remind_time = parse_date_time(date_str, remind_time_str)
            if remind_time:
                remind_before = int((event_datetime - remind_time).total_seconds() / 3600)
            else:
                remind_before = 3
        else:
            remind_before = 3

        add_event(user_id, event_name, event_datetime, remind_before)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ '{event_name}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–æ–º–Ω—é –∑–∞ {remind_before} —á.")
        return

    # ========== 2. –ü–†–û–°–ú–û–¢–† –ó–ê–ü–ò–°–ï–ô ==========
    match = re.match(r"–∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ(?: (\d+))?", text_lower)
    if match:
        days = int(match.group(1)) if match.group(1) else 7
        if days < 0:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return

        events = get_upcoming_events(user_id, days)
        if events:
            reply = f"üìÖ –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π —É –í–∞—Å —Å–ª–µ–¥—É—é—â–∏–µ –ø–ª–∞–Ω—ã:\n" + "\n".join(
                [f"{e['event_date'].strftime('%d.%m %H:%M')} {e['event_name']}" for e in events])
        else:
            reply = "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        await update.message.reply_text(reply)
        return

    # ========== 3. –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ü–ò–°–ò ==========
    match = re.match(r"–æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å (.+)", text_lower)
    if match:
        event_name = match.group(1).strip()
        deleted = delete_event(user_id, event_name)
        if deleted:
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–ø–∏—Å—å '{event_name}' —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å–æ —Å–ø–∏—Å–∫–æ–º –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    # ========== 4. –î–û–ë–ê–í–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò ==========
    match = re.match(r"(—Å–æ–∑–¥–∞–π|–∑–∞–ø–∏—à–∏) –∑–∞–º–µ—Ç–∫—É[,:]?\s*(.+?):\s*(.+?)(?: —Å —Ç–µ–≥–æ–º (.+))?$", text_lower)
    if match:
        name = match.group(2).strip().capitalize()
        content = match.group(3).strip()
        tag = match.group(4).strip() if match.group(4) else ""
        add_note(user_id, name, content, [tag] if tag else [])
        reply = f"üìù –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}'"
        if tag:
            reply += f" –∏ —Ç–µ–≥–æ–º '{tag}'"
        reply += " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
        await update.message.reply_text(reply)
        return

    # ========== 5. –ü–†–û–°–ú–û–¢–† –ó–ê–ú–ï–¢–û–ö –ü–û –¢–ï–ì–£ ==========
    match = re.match(r"–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º (.+)", text_lower)
    if match:
        tag = match.group(1).strip()
        notes = get_notes_by_tag(user_id, tag)
        if notes:
            note_list = "\n".join([f"- {n['note_name']}" for n in notes])
            await update.message.reply_text(f"üìö –í–æ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º '{tag}':\n{note_list}")
        else:
            await update.message.reply_text("üì≠ –° —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º –ø–æ–∫–∞ —á—Ç–æ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫ :")
        return

    # ========== 6. –û–¢–ö–†–´–¢–ò–ï –ó–ê–ú–ï–¢–ö–ò ==========
    match = re.match(r"–æ—Ç–∫—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ (.+)", text_lower)
    if match:
        name = match.group(1).strip()
        note = get_note_by_name(user_id, name)
        if note:
            tag_part = f"\n#{note['tag']}" if note.get("tag") else ""
            await update.message.reply_text(f"{note['note_name']}\n{note['note_content']}{tag_part}")
        else:
            await update.message.reply_text(f"‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —è –Ω–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name}")
        return

    # ========== 7. –£–î–ê–õ–ï–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò ==========
    match = re.match(r"—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É (.+)", text_lower)
    if match:
        name = match.group(1).strip()
        deleted = delete_note(user_id, name)
        if deleted:
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùó –ö —Å–æ–∂–∞–ª–µ–Ω–∏—é —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # ========== 8. –ü–ï–†–ï–ò–ú–ï–ù–û–í–ê–ù–ò–ï –ó–ê–ú–ï–¢–ö–ò ==========
    match = re.match(r"–ø–µ—Ä–µ–∏–º–µ–Ω—É–π –∑–∞–º–µ—Ç–∫—É (.+?) –Ω–∞ (.+)", text_lower)
    if match:
        old_name = match.group(1).strip()
        new_name = match.group(2).strip()
        renamed = rename_note(user_id, old_name, new_name)
        if renamed:
            await update.message.reply_text(f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ '{old_name}' —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –Ω–∞ '{new_name}'.")
        else:
            await update.message.reply_text("‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å: —Ç–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # ========== –ù–ï–ò–ó–í–ï–°–¢–ù–ê–Ø –ö–û–ú–ê–ù–î–ê ==========
    await update.message.reply_text("ü§ñ –Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à–∞–±–ª–æ–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É.")

# =============================== –ó–ê–ü–£–°–ö ===============================
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
app.run_polling()