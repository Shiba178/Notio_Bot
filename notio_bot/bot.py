import os
import re
import logging
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    MessageHandler,
    ContextTypes,
    CommandHandler,
    CallbackQueryHandler,
    filters
)

from db import (
    init_db, add_event, get_upcoming_events, delete_event,
    add_note, get_notes_by_tag, get_note_by_name, delete_note, rename_note
)
from scheduler import start_scheduler
from notio_bot.session_manager import switch_mode

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

init_db()
start_scheduler()
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()


# ========== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï ==========
def parse_date_time(date_str, time_str):
    try:
        now = datetime.now()
        dt = datetime.strptime(f"{date_str} {time_str}", "%d.%m %H:%M")
        dt = dt.replace(year=now.year)
        return dt
    except ValueError:
        return None


# ========== –û–ë–†–ê–ë–û–¢–ß–ò–ö –°–û–û–ë–©–ï–ù–ò–ô ==========
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text.strip()
    text_lower = text.lower()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    context.user_data.setdefault("messages_to_delete", []).append(update.message.message_id)

    # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    match = re.match(r"–∑–∞–ø–æ–º–Ω–∏ (\d{2}\.\d{2}) –≤ (\d{2}:\d{2}) (.+?)(?: –Ω–∞–ø–æ–º–Ω–∏ –≤ (\d{2}:\d{2}))?$", text_lower)
    if match:
        date_str = match.group(1)
        time_str = match.group(2)
        event_name = match.group(3).strip()
        remind_time_str = match.group(4)

        event_datetime = parse_date_time(date_str, time_str)
        if not event_datetime:
            await update.message.reply_text("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏.")
            return

        remind_before = 3
        if remind_time_str:
            remind_time = parse_date_time(date_str, remind_time_str)
            if remind_time:
                remind_before = int((event_datetime - remind_time).total_seconds() / 3600)

        add_event(user_id, event_name, event_datetime, remind_before)
        await update.message.reply_text(f"‚úÖ –ó–∞–ø–∏—Å—å '{event_name}' –¥–æ–±–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–æ–º–Ω—é –∑–∞ {remind_before} —á.")
        return

    # 2. –ü—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–±—ã—Ç–∏–π
    match = re.match(r"–∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ(?: (\d+))?", text_lower)
    if match:
        days = int(match.group(1)) if match.group(1) else 7
        if days < 0:
            await update.message.reply_text("‚ö†Ô∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º.")
            return

        events = get_upcoming_events(user_id, days)
        if events:
            reply = f"üìÖ –ù–∞ –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π:\n" + "\n".join(
                [f"{e['event_date'].strftime('%d.%m %H:%M')} {e['event_name']}" for e in events])
        else:
            reply = "üì≠ –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
        await update.message.reply_text(reply)
        return

    # 3. –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
    match = re.match(r"–æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å (.+)", text_lower)
    if match:
        event_name = match.group(1).strip()
        deleted = delete_event(user_id, event_name)
        if deleted:
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–ø–∏—Å—å '{event_name}' —É–¥–∞–ª–µ–Ω–∞!")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # 4. –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    match = re.match(r"(—Å–æ–∑–¥–∞–π|–∑–∞–ø–∏—à–∏) –∑–∞–º–µ—Ç–∫—É[,:]?\s*(.+?):\s*(.+?)(?: —Å —Ç–µ–≥–æ–º (.+))?$", text_lower)
    if match:
        try:
            name = match.group(2).strip().capitalize()
            content = match.group(3).strip()
            tag = match.group(4).strip() if match.group(4) else ""
            add_note(user_id, name, content, [tag] if tag else [])
            reply = f"üìù –ó–∞–º–µ—Ç–∫–∞ '{name}'"
            if tag:
                reply += f" —Å —Ç–µ–≥–æ–º '{tag}'"
            reply += " —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!"
            await update.message.reply_text(reply)
        except Exception as e:
            logging.error(f"[ADD_NOTE ERROR] {e}")
            await update.message.reply_text("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–º–µ—Ç–∫—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 5. –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–º–µ—Ç–æ–∫ –ø–æ —Ç–µ–≥—É
    match = re.match(r"–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º (.+)", text_lower)
    if match:
        tag = match.group(1).strip()
        notes = get_notes_by_tag(user_id, tag)
        if notes:
            note_list = "\n".join([f"- {n['note_name']}" for n in notes])
            await update.message.reply_text(f"üìö –ó–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–æ–º '{tag}':\n{note_list}")
        else:
            await update.message.reply_text("üì≠ –° —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–µ–≥–æ–º –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
        return

    # 6. –û—Ç–∫—Ä—ã—Ç—å –∑–∞–º–µ—Ç–∫—É
    match = re.match(r"–æ—Ç–∫—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ (.+)", text_lower)
    if match:
        name = match.group(1).strip()
        note = get_note_by_name(user_id, name)
        if note:
            tag_part = f"\n#{note['tag']}" if note.get("tag") else ""
            await update.message.reply_text(f"{note['note_name']}\n{note['note_content']}{tag_part}")
        else:
            await update.message.reply_text(f"‚ùó –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∑–∞–º–µ—Ç–∫–∏ —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º: {name}")
        return

    # 7. –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    match = re.match(r"—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É (.+)", text_lower)
    if match:
        name = match.group(1).strip()
        deleted = delete_note(user_id, name)
        if deleted:
            await update.message.reply_text(f"üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ '{name}' —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    # 8. –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    match = re.match(r"–ø–µ—Ä–µ–∏–º–µ–Ω—É–π –∑–∞–º–µ—Ç–∫—É (.+?) –Ω–∞ (.+)", text_lower)
    if match:
        old_name = match.group(1).strip()
        new_name = match.group(2).strip()
        renamed = rename_note(user_id, old_name, new_name)
        if renamed:
            await update.message.reply_text(f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ '{old_name}' –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ '{new_name}'.")
        else:
            await update.message.reply_text("‚ùó –¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        return

    await update.message.reply_text(
        "‚ùó –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Ç–æ—á–Ω—ã–π —à–∞–±–ª–æ–Ω.\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n`—Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É –î–ó: –≤—ã—É—á–∏—Ç—å –ò–ò —Å —Ç–µ–≥–æ–º —É—á–µ–±–∞`",
        parse_mode="Markdown"
    )


# ========== /START –ò –ö–ù–û–ü–ö–ò ==========
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data='calendar')],
        [InlineKeyboardButton("üìù –ó–∞–º–µ—Ç–∫–∏", callback_data='notes')],
        [InlineKeyboardButton("üìò –®–∞–±–ª–æ–Ω—ã", callback_data='templates')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:",
        reply_markup=reply_markup
    )


async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = query.from_user.id
    await query.answer()

    # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ä–µ–∂–∏–º
    await switch_mode_and_cleanup(query, context, query.data)

    if query.data == 'calendar':
        await query.message.reply_text(
            "üìÖ *–ö–∞–ª–µ–Ω–¥–∞—Ä—å:*\n"
            "`–∑–∞–ø–æ–º–Ω–∏ 13.07 –≤ 14:00 –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º –Ω–∞–ø–æ–º–Ω–∏ –≤ 12:00`\n"
            "`–∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7`\n"
            "`–æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å –≤—Å—Ç—Ä–µ—á–∞ —Å –¥—Ä—É–≥–æ–º`",
            parse_mode="Markdown"
        )
    elif query.data == 'notes':
        await query.message.reply_text(
            "üìù *–ó–∞–º–µ—Ç–∫–∏:*\n"
            "`—Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É –î–ó: –≤—ã—É—á–∏—Ç—å –ò–ò —Å —Ç–µ–≥–æ–º —É—á–µ–±–∞`\n"
            "`–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –î–æ–º: —É–±—Ä–∞—Ç—å—Å—è –¥–æ–º–∞`\n"
            "`–ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º —É—á–µ–±–∞`\n"
            "`–æ—Ç–∫—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –î–ó`\n"
            "`—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É –î–æ–º`\n"
            "`–ø–µ—Ä–µ–∏–º–µ–Ω—É–π –∑–∞–º–µ—Ç–∫—É –î–ó –Ω–∞ –î–æ–º–∞—à–∫–∞`",
            parse_mode="Markdown"
        )
    elif query.data == 'templates':
        await query.message.reply_text(
            "üìò *–í—Å–µ —à–∞–±–ª–æ–Ω—ã (–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —Å–æ–±–ª—é–¥–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç):*\n\n"
            "üóì `–∑–∞–ø–æ–º–Ω–∏ <–¥–∞—Ç–∞> –≤ <–≤—Ä–µ–º—è> <–¥–µ–π—Å—Ç–≤–∏–µ> –Ω–∞–ø–æ–º–Ω–∏ –≤ <–≤—Ä–µ–º—è>`\n"
            "üóì `–∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ <—á–∏—Å–ª–æ>`\n"
            "üóì `–æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å <–Ω–∞–∑–≤–∞–Ω–∏–µ>`\n"
            "üìù `—Å–æ–∑–¥–∞–π/–∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –ù–∞–∑–≤–∞–Ω–∏–µ: —Ç–µ–∫—Å—Ç —Å —Ç–µ–≥–æ–º –¢–µ–≥`\n"
            "üìù `–æ—Ç–∫—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –ù–∞–∑–≤–∞–Ω–∏–µ`\n"
            "üìù `—É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É –ù–∞–∑–≤–∞–Ω–∏–µ`\n"
            "üìù `–ø–µ—Ä–µ–∏–º–µ–Ω—É–π –∑–∞–º–µ—Ç–∫—É –°—Ç–∞—Ä–æ–µ –Ω–∞ –ù–æ–≤–æ–µ`",
            parse_mode="Markdown"
        )


# ========== –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø ==========
app.add_handler(CommandHandler("start", start_command))
app.add_handler(CallbackQueryHandler(button_handler))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

app.run_polling()
