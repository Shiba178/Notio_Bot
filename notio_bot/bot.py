import os
import logging
from datetime import datetime
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters
)

from db import (
    init_db, add_event, get_upcoming_events, delete_event,
    add_note, get_notes_by_tag, get_note_by_name, delete_note, rename_note
)
from scheduler import start_scheduler
from parsing import parse_message

logging.basicConfig(level=logging.INFO)

TELEGRAM_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
init_db()
start_scheduler()

# –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

# –û—Å–Ω–æ–≤–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
main_keyboard = ReplyKeyboardMarkup(
    keyboard=[
        ["–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É", "–ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–º–µ—Ç–∫–∏"],
        ["–î–æ–±–∞–≤–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ", "–ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω—ã"],
        ["–ü–æ–º–æ—â—å"]
    ],
    resize_keyboard=True
)

# /start
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî —Ç–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∑–∞–º–µ—Ç–∫–∞–º –∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º.\n\n"
        "üìå –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å—Ç—Ä–æ–≥–æ –ø–æ —à–∞–±–ª–æ–Ω–∞–º (—Å–º. /help).\n"
        "‚úÖ –ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!",
        reply_markup=main_keyboard
    )

# /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üÜò <b>–®–∞–±–ª–æ–Ω—ã –∫–æ–º–∞–Ω–¥:</b>\n\n"
        "üóì <b>–ö–∞–ª–µ–Ω–¥–∞—Ä—å:</b>\n"
        "‚Ä¢ –∑–∞–ø–æ–º–Ω–∏ 13.07 –≤ 12:00 —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥ –Ω–∞–ø–æ–º–Ω–∏ –≤ 10:00\n"
        "‚Ä¢ –∫–∞–∫–∏–µ —É –º–µ–Ω—è –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 3 –¥–Ω—è\n"
        "‚Ä¢ –æ—Ç–º–µ–Ω–∏ –∑–∞–ø–∏—Å—å —Å—Ç–æ–º–∞—Ç–æ–ª–æ–≥\n\n"
        "üìù <b>–ó–∞–º–µ—Ç–∫–∏:</b>\n"
        "‚Ä¢ —Å–æ–∑–¥–∞–π –∑–∞–º–µ—Ç–∫—É –î–æ–º: —É–±—Ä–∞—Ç—å –¥–æ–º–∞ —Å —Ç–µ–≥–æ–º –¥–µ–ª–∞\n"
        "‚Ä¢ –∑–∞–ø–∏—à–∏ –∑–∞–º–µ—Ç–∫—É –î–ó: –ø–æ–≤—Ç–æ—Ä–∏—Ç—å —Ç–µ–º—É\n"
        "‚Ä¢ –æ—Ç–∫—Ä–æ–π —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏ –î–ó\n"
        "‚Ä¢ –ø–æ–∫–∞–∂–∏ —Å–ø–∏—Å–æ–∫ –∑–∞–º–µ—Ç–æ–∫ —Å —Ç–µ–≥–æ–º —É—á–µ–±–∞\n"
        "‚Ä¢ —É–¥–∞–ª–∏ –∑–∞–º–µ—Ç–∫—É –î–ó\n"
        "‚Ä¢ –ø–µ—Ä–µ–∏–º–µ–Ω—É–π –∑–∞–º–µ—Ç–∫—É –î–ó –Ω–∞ –î–æ–º–∞—à–∫–∞\n\n"
        "‚å®Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ <b>—Ç–æ—á–Ω—ã–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏</b>, –∏–Ω–∞—á–µ –±–æ—Ç –Ω–µ –ø–æ–π–º—ë—Ç.",
        parse_mode="HTML"
    )

# /restart
async def restart_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await start_command(update, context)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_message = update.message.text.strip()

    try:
        result = parse_message(user_message)
    except Exception as e:
        logging.error(f"[PARSING ERROR] {e}")
        await update.message.reply_text("‚ö†Ô∏è –Ø –Ω–µ —Å–º–æ–≥ —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–∞—à –∑–∞–ø—Ä–æ—Å. –£–±–µ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–∞.")
        return

    action = result.get("action")
    details = result.get("details")

    try:
        if action == "create_event":
            name = details["name"]
            date = details["date"]
            remind = details["remind"]
            add_event(user_id, name, date, remind)
            await update.message.reply_text(
                f"üóì –ó–∞–ø–∏—Å—å ¬´{name}¬ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–∞ {date.strftime('%d.%m %H:%M')}! –ù–∞–ø–æ–º–Ω—é –∑–∞ {remind} —á."
            )

        elif action == "list_events":
            days = details["days"]
            events = get_upcoming_events(user_id, days)
            if events:
                msg = f"üìÖ –í–∞—à–∏ –ø–ª–∞–Ω—ã –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ {days} –¥–Ω–µ–π:\n" + "\n".join(
                    [f"{e['event_date'].strftime('%d.%m %H:%M')} ‚Äî {e['event_name']}" for e in events]
                )
            else:
                msg = "üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π."
            await update.message.reply_text(msg)

        elif action == "delete_event":
            name = details["name"]
            deleted = delete_event(user_id, name)
            if deleted:
                await update.message.reply_text(f"üóë –ó–∞–ø–∏—Å—å ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞!")
            else:
                await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∑–∞–ø–∏—Å–∏ –Ω–µ—Ç. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Å–æ–±—ã—Ç–∏–π.")

        elif action == "create_note":
            name = details["name"]
            content = details["content"]
            tags = details.get("tags", [])
            add_note(user_id, name, content, tags)
            tag_msg = f" –∏ —Ç–µ–≥–æ–º #{tags[0]}" if tags else ""
            await update.message.reply_text(f"üìù –ó–∞–º–µ—Ç–∫–∞ ¬´{name}¬ª{tag_msg} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!")

        elif action == "list_notes":
            tag = details["tag"]
            notes = get_notes_by_tag(user_id, tag)
            if notes:
                msg = f"üìö –ó–∞–º–µ—Ç–∫–∏ —Å —Ç–µ–≥–æ–º #{tag}:\n" + "\n".join([f"‚Äî {n['note_name']}" for n in notes])
            else:
                msg = "üì≠ –° –∑–∞–º–µ—Ç–∫–∞–º–∏ —Å —ç—Ç–∏–º —Ç–µ–≥–æ–º –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
            await update.message.reply_text(msg)

        elif action == "open_note":
            name = details["name"]
            note = get_note_by_name(user_id, name)
            if note:
                content = f"üìñ {note['note_name']}\n{note['note_content']}"
                if note['tags']:
                    content += f"\n#{note['tags'][0]}"
                await update.message.reply_text(content)
            else:
                await update.message.reply_text(f"‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –∑–∞–º–µ—Ç–∫—É ¬´{name}¬ª.")

        elif action == "delete_note":
            name = details["name"]
            deleted = delete_note(user_id, name)
            if deleted:
                await update.message.reply_text(f"üóë –ó–∞–º–µ—Ç–∫–∞ ¬´{name}¬ª —É–¥–∞–ª–µ–Ω–∞.")
            else:
                await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∑–∞–º–µ—Ç–∫–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

        elif action == "rename_note":
            old_name = details["old_name"]
            new_name = details["new_name"]
            renamed = rename_note(user_id, old_name, new_name)
            if renamed:
                await update.message.reply_text(f"‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ ¬´{old_name}¬ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∞ –≤ ¬´{new_name}¬ª.")
            else:
                await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–ª–∏ –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É.")

        else:
            await update.message.reply_text("ü§ñ –ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.")
    except Exception as e:
        logging.error(f"[HANDLER ERROR] {e}")
        await update.message.reply_text("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# ==================== –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ====================
app.add_handler(CommandHandler("start", start_command))
app.add_handler(CommandHandler("help", help_command))
app.add_handler(CommandHandler("restart", restart_command))
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# ==================== –ó–∞–ø—É—Å–∫ ====================
app.run_polling()